
SQL Concepts and Definitions with Use Cases

1. Stored Procedures:
Definition: A stored procedure is a group of SQL statements that can be executed as a single unit. 
It is stored in the database and can accept parameters, perform operations, and return results.
Use Case: In the provided script, sp_GetManagerById is a stored procedure used to retrieve a manager's details by their ID.

2. SELECT Statement:
Definition: The SELECT statement is used to query data from one or more tables in a database.
Use Case: In the sp_GetManagerById procedure, the SELECT statement retrieves the ManagerID, ManagerName, ManagerDesignation, and ProjectName from the Manager table.

3. NOLOCK Hint:
Definition: The NOLOCK hint allows a SELECT statement to read data without acquiring shared locks, potentially reading uncommitted data.
Use Case: The NOLOCK hint is used in the SELECT query within both stored procedures to read the Manager table without locking the rows.

4. IF-ELSE Logic:
Definition: The IF-ELSE statement is used to execute different blocks of SQL code depending on whether a specified condition is true or false.
Use Case: In sp_AddOrUpdateManager, IF-ELSE logic is used to determine whether to update an existing manager or insert a new one.

5. OUTPUT Parameter:
Definition: OUTPUT parameters are used in stored procedures to return values to the calling program or query.
Use Case: The sp_AddOrUpdateManager procedure uses the OUTPUT parameter (@newId) to return the ManagerID, whether it's an updated or newly inserted value.

6. SCOPE_IDENTITY():
Definition: SCOPE_IDENTITY() returns the last identity value generated for a specific session and scope.
Use Case: In sp_AddOrUpdateManager, SCOPE_IDENTITY() is used to return the ID of the newly inserted manager after an INSERT operation.

**`@@IDENTITY`**  
*Definition:*  
- `@@IDENTITY` returns the last identity value generated for the current session, regardless of the scope.

*Use Case:*  
- `@@IDENTITY` can be used to retrieve the identity value generated by an `INSERT` operation, even if it occurs within a trigger or another scope.

*Example:*  
- If a trigger on the `Manager` table inserts a record into another table with an identity column, `@@IDENTITY` will return the identity value from that trigger,
not the `Manager` table itself. This can lead to unexpected results if triggers are involved, which is why `SCOPE_IDENTITY()` is preferred in many cases.

7. UPDATE Statement:
Definition: The UPDATE statement is used to modify existing data in a table.
Use Case: In sp_AddOrUpdateManager, the UPDATE statement is used to modify the details of an existing manager.

8. INSERT INTO:
Definition: The INSERT INTO statement is used to add new records to a table.
Use Case: In sp_AddOrUpdateManager, the INSERT INTO statement is used to insert a new manager's details into the Manager table.

9. SET NOCOUNT OFF:
Definition: SET NOCOUNT ON/OFF determines whether the number of rows affected by a SQL statement is returned as part of the result set.
Use Case: SET NOCOUNT OFF is used in the sp_AddOrUpdateManager procedure to enable the row count message, which can be useful for debugging and understanding the number of affected rows.

10. Parameterized Queries:
Definition: Parameterized queries allow values to be passed as arguments to SQL statements, preventing SQL injection and improving code readability.
Use Case: Both procedures use parameters like @ManagerID, @ManagerName, etc., to perform dynamic operations based on the input values.

11. **`VARCHAR` vs `NVARCHAR`**  
*Definition:*  
- `VARCHAR` (Variable Character) is used to store non-Unicode characters, meaning it supports only ASCII characters.
- `NVARCHAR` (National Variable Character) is used to store Unicode characters, supporting characters from multiple languages.

*Use Case:*  
- Use `VARCHAR` for data that only contains English or standard ASCII characters (e.g., usernames or passwords).
- Use `NVARCHAR` when data involves multiple languages or special characters (e.g., storing names in different scripts such as Chinese, Arabic, etc.).

*Example:*  
- **VARCHAR:** Storing an English name like `JohnDoe` in `VARCHAR(50)` will use fewer bytes (1 byte per character).
- **NVARCHAR:** Storing a name in Chinese characters like `李小龍` in `NVARCHAR(50)` will store each character using 2 bytes, allowing multiple languages to be stored in the same field.

**12. GO Statement:**  
*Definition:*  
- `GO` is a batch terminator used in SQL Server to indicate the end of a batch of T-SQL statements. It is not a T-SQL command but a signal to the SQL Server tools to execute the preceding batch of statements as a unit.

*Use Case:*  
- In both `sp_AddOrUpdateManager` and `sp_GetManagerById`, the `GO` statement is used after the creation of the stored procedures to mark the end of the batch, ensuring that SQL Server processes each procedure creation separately from other operations.